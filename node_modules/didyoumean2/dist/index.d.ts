declare enum ReturnTypeEnums {
    ALL_CLOSEST_MATCHES = "all-closest-matches",
    ALL_MATCHES = "all-matches",
    ALL_SORTED_MATCHES = "all-sorted-matches",
    FIRST_CLOSEST_MATCH = "first-closest-match",
    FIRST_MATCH = "first-match"
}

declare enum ThresholdTypeEnums {
    EDIT_DISTANCE = "edit-distance",
    SIMILARITY = "similarity"
}

/**
 * Main function for didyoumean2
 * @param {string} input - string that you are not sure and want to match with `matchList`
 * @param {Object[]|string[]} matchList - List for matching with `input`
 * @param {null|Object|undefined} options - options that allows you to modify the behavior
 * @returns {Array|null|Object|string} - matched result(s), return object if `match` is `{Object[]}`
 */
declare const didYouMean: <T extends string | object>(input: string, matchList: readonly T[], options?: Partial<Readonly<{
    caseSensitive: boolean;
    deburr: boolean;
    matchPath: readonly (string | number)[];
    returnType: ReturnTypeEnums;
    threshold: number;
    thresholdType: ThresholdTypeEnums;
    trimSpaces: boolean;
}>> | undefined) => T | T[] | null;

export default didYouMean;
export { ReturnTypeEnums, ThresholdTypeEnums };
